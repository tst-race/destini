#!/usr/bin/env python

#### video_wedge VERSION 2
####
#### Script divergence between VEIL copy and sri-race-plugins copy
#### (this one).  We'll continue with this one.  Prior version will
#### be renamed to end in ".v1".

import os
import sys
import glob
import zlib
import shutil
# Would be nice to unify all of this:
#
# subprocess for wedge / unwedge / capacity
import subprocess
from subprocess import call, check_output, Popen

import argparse
import random
from PIL import Image

# USE_NETPBM = True
USE_PIDS = False
USE_TMP = True
STRICT_COLOR = True
CLEANUP = False

USE_PARALLEL = True
NPROCS='8'
#NPROCS='1'

log = open('/tmp/video_wedge.log', 'w')

def logprint(str):
    if log is not None:
        log.write(str+'\n')

logprint(' '.join(sys.argv))

genprn  = random.Random()
genprn.seed()

#
# What's the best way to spin this up as a separate PRN?
def genmsg(filename, n):
    logprint(f"Writing {n} bytes to {filename}.")
    out = [ genprn.randint(0,255) for i in range(n) ]
    with open(filename, 'wb') as f:
        f.write(bytes(out))

#
# You will need ffmpeg to use this script, preferably version 4.1 or
# 4.2, and ensure that aac is enabled, e.g. "./configure --enable-encoder=aac"
#

# *sigh* - force the "local" version of ffmpeg - it's likely to be the
# *one built from source:

ffmpeg = "/usr/local/bin/ffmpeg"
if not os.path.exists(ffmpeg):
    # Fall back to the one that we might have picked up from debian:
    ffmpeg = "/usr/bin/ffmpeg"


def checkprog(filename):
    if os.path.isfile(filename):
        return filename
    else:
        cmd = os.path.split(filename)[-1]
        print("Can't find {}: File {} does not exist.".format(cmd, filename))
        quit()

def maybe_mkdir(dir):
    try:
        os.mkdir(dir)
    except:
        print("Cleaning and reusing {}.".format(dir))
        files = glob.glob(dir+"/*")
        for f in files:
            os.remove(f)


# Set wedge scratch directory (for jpeg frames):
if USE_PIDS:
    default_wedge_dir = ".wedge." + str(os.getpid())
else:
    default_wedge_dir = ".wedge"

if USE_TMP:
    default_wedge_dir = "/tmp/" + default_wedge_dir

# Set chunk scratch directory (for message chunks):
if USE_PIDS:
    chunk_dir = ".chunks_in." + str(os.getpid())
else:
    chunk_dir = ".chunks_in"
if USE_TMP:
    chunk_dir = "/tmp/" + chunk_dir

    

race_plugin_dir = "/etc/race/plugins/unix/x86_64/PluginTA2SRIDecomposed/"
if not os.path.exists(race_plugin_dir):
    race_plugin_dir = "."

#race_bindir = race_plugin_dir + "bin/"
race_bindir = "/usr/local/bin"
            
#
# Don't use the scale parameter.  ffmpeg can handle frame resize:
#def change_frame_params(filename, quality=None, scale=None):
#    p = []
#    if quality is not None:
#        p += [ "-quality", str(quality) ]
#    if scale is not None:
#        p += [ "-resize", str(scale), "-filter", "point" ]
#    
#    tmpdir = '.tmp'
#    tmp_name = tmpdir+'/video_tmp.jpg'
#    shutil.copyfile(filename, tmp_name)
#    #os.rename(filename, tmp_name)
#    call( [convert, tmp_name ] + p + [filename] )
#
# frame_repeat = 10


#def change_quality(in_filename, out_filename, quality=None):
 #   if quality is not None and not os.path.exists(out_filename):
#        tmpdir = '.tmp'
#        tmp_name = tmpdir+'/video_tmp.jpg'
#        shutil.copyfile(filename, tmp_name)
#        im = Image.open(in_filename).save(out_filename, "JPEG", quality=quality)


parser = argparse.ArgumentParser(description='Insert steganographic content into a video stream.')
parser.add_argument('-cover',  required=True, help='A cover input video.')
parser.add_argument('-message', required=True,  help='A file to be embedded steganographically.')
parser.add_argument('-output',  default=None, help='Steganographic output video.')
parser.add_argument('-seed', type=int, default=None, help='If provided, sets the seed for PRN selection of frequencies. (default=None)')
parser.add_argument('-bpf', type=int, default=1, help='Bits per frequency to use for embedding (default=1)')
parser.add_argument('-scale', type=int, default=None, help='If provided, expands the image by the specified factor (e.g., 2 = double image size).')
parser.add_argument('-ecc', type=int, default=None, help='If provided, dictates the ECC block length. (default=None)')
parser.add_argument('-max', dest='max', action='store_true', help='If provided, forces settings to maximize bandwidth.  Overrides bpf, nfreqs, and mcudensity.')
parser.add_argument('-nosteg', dest='nosteg', action='store_true', help="If provided, don't embed, just copy frames.  An expansion test.")
parser.add_argument('-nocache', dest='nocache', action='store_true', help='If provided, will NOT cache the cover images.')
parser.add_argument('-cache_dir', default=race_plugin_dir, help='If provided, overrides the race_plugin_dir for cached cover frames.')
parser.add_argument('-noclean', dest='noclean', action='store_true', help='If provided, will NOT clean up the .chunks_in directory.')
parser.add_argument('-nfreqs', type=int, default=4, help='If provided, dictates the number of frequencies per MCU. (default=4)')
parser.add_argument('-freq_list', default=None, help='If provided, overrides all quality settings and uses the specified comma-separated frequency indices for encoding.')
parser.add_argument('-maxfreqs', type=int, default=4, help='If provided, sets the total number of frequencies for consideration. (default=4)')
parser.add_argument('-quanta', type=int, default=8, help='Number of quanta to use (default 8).')
parser.add_argument('-quality', type=int, default=None, help='If provided, embed message at this quality. (default=None)')
parser.add_argument('-jpeg_quality', type=int, default=None, help='If provided, transcode JPEGs to this quality before stegging.')
parser.add_argument('-mcudensity', type=int, default=100, help='Percentage of MCU usage (default 100).')
parser.add_argument('-qp', type=int, default=12, help='Output quantization parameter value for conversion to .mp4')
parser.add_argument('-min_chunk_size', type=int, default=16, help='Minimum per-frame chunk size for packetizing the message.')
#parser.add_argument('-rate_out', type=int, default=30, help='Frame rate for assembling output video (default=30).')
parser.add_argument('-rate_out', type=int, default=None, help='Frame rate for assembling output video (default=None).  If None, uses ffmpeg defaults.')
parser.add_argument('-frames', default=None, help='Select a range of frames of the form <start>:<end> rather than the whole video.')
parser.add_argument('-noabs', dest='abs', action='store_false', help='ABS = Always Be Stegging is the default.  If frames are skipped, we embed noise as a stealth strategy.  This flag causes skipped cover frames to be copied without any stegging.')
parser.add_argument('-comp', default='y', help='Color channels to use.  Can be any combination of y, u, v.')
parser.add_argument('-wedge_dir', default=default_wedge_dir, help='directory for wedge frames')
parser.add_argument('-bindir', default='/usr/local/bin/', help='Where to look for wedge, unwedge, and wcap.')
ns = parser.parse_args()


wedge_prog =     checkprog( os.path.join(ns.bindir, "wedge") )
wcap_prog  =     checkprog( os.path.join(ns.bindir, "wcap") )


wedge_dir = ns.wedge_dir
maybe_mkdir(wedge_dir)
maybe_mkdir(chunk_dir)


if ns.cache_dir is not None:
    race_plugin_dir = ns.cache_dir
cache_dir = os.path.join(race_plugin_dir, '.cover')

if not ns.nocache and not os.path.exists(cache_dir):
    os.mkdir(cache_dir)

if ns.abs:
    logprint("ABS mode is ON: Skipped frames will have noise embedded.")
else:
    logprint("ABS mode is OFF: Every skipped frame will not have any embedding.")


message_file = ns.message
output_video = ns.output
min_chunk_size = ns.min_chunk_size
min_reps = 2
if ns.nocache:
    coverpath = ".cover/"
else:
    coverpath = os.path.join(cache_dir, os.path.splitext(os.path.basename(ns.cover))[0] + "/")
covervideo = ns.cover


if not os.path.exists(coverpath):
    os.mkdir(coverpath)

if ns.max:
    ns.bpf = 1
    ns.nfreqs = 12
    ns.maxfreqs = 12
    ns.mcudensity=100
    logprint("Using maximum bandwidth settings: bpf=1, nfreqs=12, maxfreqs=12, and mcudensity=100")
elif ns.freq_list is not None:
    ns.quality = None
    ns.jpeg_quality = None
    freq_list = [ int(x) for x in ns.freq_list.split(',') ]
    logprint("Overriding quality settings with these frequencies: {}".format(freq_list) )
    ns.maxfreqs = len(freq_list)
    logprint("Overriding maxfreqs and setting it to {}".format(ns.maxfreqs) )

if ns.seed is not None:
    seed = ns.seed
    logprint("PRN seed is {}.".format(seed))
else:
    seed = 0
    logprint("No randomization.")

if seed > 0:
    random.seed(seed)


bytes_per_mcu = float(ns.bpf * ns.nfreqs) / float(8)
logprint("MCU Density = {}; Bytes per MCU = {}".format(ns.mcudensity, bytes_per_mcu))

wav_file = coverpath + "audio.wav"

    
#############  EXTRACTION OF VIDEO FRAMES #############

# Set up the choices for expansion parameters.

# These params are always used:
expand_params_basic = [
    "-pix_fmt",  "yuvj420p",
    "-vsync", "0"
]


# This set of parameters sets a high quality, and appears to be
# equivalent to asking for JPEG quality 96:
expand_params_1 = [
    "-q:v", "1",
    "-qmin", "1",
    "-qmax", "1"
]


# crf 10 asks for a constant rate factor, but the output JPEG quality
# is 26!  It seems likely that this set of parameters will fail:
expand_params_2 = [
    "-crf", "10",
    "-preset", "slow"
]

# Don't use this:
expand_params_3 = [
    "-qscale:v", "1"
]



expand_params = expand_params_basic + expand_params_1

    
# Unless cached, expand the cover into individual JPEG frames at the
# highest possible quality.  While you're at it, extract the audio
# track too:

if ns.nocache or not os.path.exists(coverpath + "frame-0001.jpg"):
    expand_cmd = [ffmpeg,  "-i", covervideo ] + expand_params +  [ coverpath+"frame-%04d.jpg" ]
    logprint(f"Expanding to jpeg: {expand_cmd}")

    call( expand_cmd )

    # Extract the audio track:
    logprint(f"Expanding to audio: {wav_file}")
    call( [ffmpeg,  "-i", covervideo, wav_file] )

#############  ############# ############# #############

# Compute frame count:
frame_files = glob.glob(coverpath + "f*.jpg")
nfiles = len(frame_files)


#if ns.frames:
#    l = ns.frames.split(':')
#    start_frame = int(l[0])
#    end_frame = int(l[1])
#else:
#    start_frame = 1
#    end_frame = nfiles


if ns.frames:
    l = ns.frames.split(':')

    if len(l[0]) > 0:
        start_frame = int(l[0])
    else:
        start_frame = 1

    if len(l[1]) > 0:
        end_frame = int(l[1])
    else:
        end_frame = nfiles
    
    if len(l) > 2 and len(l[2]) > 0:
        skip_frames = int(l[2])
    else:
        skip_frames = 1
else:
    start_frame = 1
    end_frame = nfiles
    skip_frames = 1

print(f"Starting at frame {start_frame}, ending at {end_frame}, skip_frames = {skip_frames}")

# This is used solely for the repetition computation:
nframes = ((end_frame - start_frame) / skip_frames) + 1
logprint(f"Number of frames = {nframes}.")

#frame_capacity = ( int(check_output( [wcap, coverpath + "frame-0001.jpg"] )) * ns.mcudensity ) / 100

capargs = [
    "-comp", ns.comp,
    "-bpf", str(ns.bpf),
    "-nfreqs", str(ns.nfreqs)
]

if ns.ecc is not None:
    capargs = [ "-ecc", str(ns.ecc) ] + capargs
    
frame_capacity = int( check_output( [wcap_prog ] + capargs + [ coverpath + "frame-0003.jpg"] ) )
frame_capacity = (frame_capacity * ns.mcudensity) / 100

logprint("Frame capacity = {}".format(frame_capacity))
# Find an appropriate chunk size - try to ensure at least two
# copies per cover medium:
mlen = os.path.getsize(message_file)
logprint("Message total size = {} bytes.".format(mlen))
nf_per_message = int( mlen / nframes )
#if nf < min_reps:
#    logprint("Sorry! This payload won't fit.")
#    quit()
frames_per_copy = float(mlen) / frame_capacity
logprint("Frames per copy: {}".format(frames_per_copy))

nreps = float(nframes) / frames_per_copy
logprint("Number of repetitions = {}".format(nreps))
if nreps < 1:
    logprint("Message appears to be too big for this video.")
    quit()

#chunk_size = min_reps * nf

# libjel bitstreams will insert 3 extra bytes of overhead:
# 1) density
# 2) length = 4 bytes
# 3) checksum
bitstream_overhead = 6

# Chunking (below) splits a message into chunks, each of which will
# fit into a frame.  Chunks introduce N bytes each of 
# 1) sequence number
# 2) total number of chunks,
# 3) chunk length for this frame
chunk_overhead = 21

# We now also compute the payload checksum (adler32) for the chunk:
chunk_checksum = 4
margin = 10
chunk_size = int(frame_capacity) - (bitstream_overhead + chunk_overhead + chunk_checksum + margin)


if (chunk_size < min_chunk_size):
    chunk_size = min_chunk_size

logprint(f"chunk_size = {chunk_size}")
if (chunk_size > frame_capacity):
    logprint( "You might need more video frames, since chunk_size is > frame_capacity={}.".format(frame_capacity) )
    quit()
      
# Divide mlen by the number of files:
   

# Rethink this - unless they are very large, plain text files will
# get chopped up into tiny pieces.  We should establish a minimum
# packet size, say 16.  Impose a constraint that each packet encode
# the sequence number and then the total number of packets in the
# video.

nchunks1 = int(mlen / chunk_size)
rem = mlen % chunk_size
logprint("Last chunk size should be {}.".format(rem))
if rem > 0:
    nchunks1 += 1
chunks = []
logprint("Expected number of chunks: {}".format(nchunks1))

# Based on the frame range and computed chunk size, split the original
# message into payloads, one frame per payload:

with open(message_file, 'rb') as f:
    i = 0
    while i >= 0:
        x = f.read(chunk_size)
        if x is None:
            i = -1
        else:
            chunkname = chunk_dir + "/chunk{}.dat".format(i)
            i += 1
            if len(x) != chunk_size:
                logprint("{} len={}".format(chunkname, len(x)))
            with open(chunkname, 'wb') as g:
                # Simple packet:
                # Sequence number,  number of sequences, and  length of payload
                g.write("{:05d}{:05d}{:05d}".format(i, nchunks1, len(x)).encode())
                g.write(x)                # The payload
                checksum = zlib.adler32(x)
                # Big issue still to be resolved: big-endian or little endian???
                g.write(checksum.to_bytes(4, 'big'))
            chunks.append(chunkname)
            if len(x) < chunk_size:
                i = -1

                
nchunks = len(chunks)
logprint("Actual number of chunks: {}".format(nchunks))

logprint("========== using ffmpeg in {}".format(ffmpeg))
logprint("========== using wedge in {}".format(wedge_prog))

# s = ns.seed

wedge_params = [ "-setval",
                 "-comp", ns.comp, 
                 "-verbose", "1",
                 "-quanta", str(ns.quanta), 
                 "-bpf", str(ns.bpf),
                 "-nfreqs", str(ns.nfreqs),
                 "-maxfreqs", str(ns.maxfreqs),
                 "-mcudensity", str(ns.mcudensity) ]

if ns.quality is not None:
    wedge_params = wedge_params + [ "-quality", str(ns.quality) ]

if ns.freq_list is not None:
    wedge_params = wedge_params + [ "-freq", ns.freq_list ]

if ns.ecc is None:
    wedge_params = wedge_params + [ "-noecc" ]
else:
    wedge_params = wedge_params + [ "-ecc", str(ns.ecc) ]


cmdstring = ''

logprint(f"Using wedge parameters '{wedge_params}'")

exp_frame_density = frame_capacity

# k will be the steg frame number:
k = 1
seeds = []
stegs = []
# Collect seeds and steg files here to keep the PRN aligned correctly:
for i in range(start_frame, end_frame+1):
    seeds = seeds + [ random.randint(1,65536) ]
    stegs = stegs + [ wedge_dir + "/frame-{:04}.jpg".format(k) ]
    k += 1

logprint(f"Making chunks [{start_frame}, {end_frame+1}]...")
commands = []
k = 0
# This is needed to grab the correct chunks even if we're skipping
# frames:
j = start_frame-1
for i in range(start_frame, end_frame+1):
    cover = coverpath + "frame-{:04}.jpg".format(i)
    qcover = coverpath + "qframe-{:04}.jpg".format(i)    

    # We want to emit frames sequentially, but inside this look we
    # will need to ensure that the "real steg" is only performed with
    # a stride of "skip_frames":
    
    # Start the steg frames at 1, so it looks normal to ffmpeg:
    steg = stegs[k]
    s = seeds[k]
    k += 1

    # 'i' and 'k' are frame counters.  To implement 'skip_frames' we
    # will need to steg real content only every i % skip_frames
    # frames.  Two options: 1) when we skip, just use the 'cp' command
    # as seen below, or 2) abs - always be stegging, but ensure that
    # the "skipped" frames are nonsense stegs that will be ignored:

    # logprint (" x = ", x)
    x = exp_frame_density

#    x = ( int(check_output( [wcap_prog, cover] )) * ns.mcudensity ) / 100

    # Generate a new "seed" for each invocation of wedge, but that
    # seed itself is a result of supplying this script's seed
    # argument to the Python PRN:


    if ns.nosteg:
        cmdlist =  ["cp", qcover, steg]
    elif (i % skip_frames) != 0:
        # Choose either 'cp' or nonsense steg - effectively skipping
        # frames.  For testing, just cp.  Also, need to ensure that
        # this is consistent with the computation for repetition:
        if ns.abs:
            nbytes = int(frame_capacity) - 1
            genmsg("/tmp/noise.dat", nbytes)
            # It should be safe to always use a seed here:
            cmdlist = [ wedge_prog ] + wedge_params + [ "-seed", str(s), "-data", "/tmp/noise.dat", qcover, steg ]
        else:
            cmdlist =  ["cp", qcover, steg]
    elif x > chunk_size:
        j = j % nchunks
        # If qcover exists and does not match jpeg_quality, we are
        # toast, so temp. fix this.  Ultimately we need better cache
        # control.
        
        # if ns.jpeg_quality is not None and not os.path.exists( qcover ):
        if ns.jpeg_quality is None:
            shutil.copyfile(cover, qcover)
        else:
            Image.open(cover).save(qcover, "JPEG", quality=ns.jpeg_quality)

            
        if ns.seed is not None:
            # Value of s is already set above:
            #s = random.randint(1,65536)    
            cmdlist = [ wedge_prog ] + wedge_params + [ "-seed", str(s), "-data", chunks[j], qcover, steg ]
        else:
            cmdlist = [ wedge_prog ] + wedge_params + [ "-data", chunks[j], qcover, steg ]
        # j gets incremented iff. we USE a chunk:
        j += 1
    else:
        cmdlist =  ["cp", qcover, steg]

    try:
        scmd = ' '.join(cmdlist)
        logprint( f"{i}: {scmd}" )
    except:
        print(f"Error in join(cmdlist).  cmdlist = {cmdlist}")
        exit()

    commands.append(cmdlist)
    cmdstring = cmdstring + scmd + '\n'
    
logprint(f"...Finished making chunks.")

if USE_PARALLEL:
    logprint ("starting parallel")

    cmd = ['parallel', '--jobs', NPROCS]

    p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    _s_out, _s_err = p.communicate(input=cmdstring.encode())

    if p.returncode:
        logprint (f'parallel wedge returned {p.returncode}')
        with open ('/tmp/parallel-wedge.log', 'a+') as l_out:
            if _s_out:
                l_out.write (_s_out)
            if _s_err:
                l_out.write (_s_err)
else:
    logprint ("Invoking wedge sequentially")
    for cmd in commands:
        logprint(f"cmd: {cmd}")
        r = check_output( cmd )
        logprint(f"rc={r}")

    


#p = ["-c:v", "libx264", "-g", "15", "-pix_fmt", "yuv420p", "-strict", "-2", "-qp", str(ns.qp) ]

repack_params_basic = [ "-y",
                        "-c:v",  "libx264",
                        #"-g", "15",
                        "-g", "150",   # This is what the covers have.
                        "-pix_fmt", "yuvj420p",
                        "-strict", "-2"
                       ]
                      


# Consider removing the "-qp" flag:
repack_params_3 = [
    "-qp", str(ns.qp)
]


# A potential mismatch: we can use repack_params_2 to repack the steg
# video, but on the receiving side we are using the -q options in
# repack_params_3.  Does it matter??

# Try for a constant high bit rate, preset slow to achieve decent
# compression:
repack_params_2 = [
    "-preset", "slow",
    "-crf", "16"
]

# This set of parameters appears to be equivalent to asking for JPEG
# quality 96:
repack_params_1 = [
    "-q:v", "1",
    "-qmin", "1",
    "-qmax", "1"
]

repack_params = repack_params_basic + repack_params_1


# does this help preserve color spaces?
if STRICT_COLOR:
    repack_params += ['-color_primaries', 'smpte170m', '-color_trc', 'smpte170m', '-colorspace', 'smpte170m']


# p = ["-c:v", "libx264", "-g", "15", "-strict", "-2", "-crf", "0" ]
# p = ["-c:v", "libx264", "-g", "15", "-crf", "0" ]
# "-crf 0" seems to be a crapshoot:
#p = [  "-pix_fmt",  "yuv420p", "-g", "15", "-strict", "-2", "-crf", "0" ]
#p = [  "-pix_fmt",  "yuv420p", "-strict", "-2", "-q", "1"]

if output_video is None:
    logprint("Not producing an output video.  You can use the JPEG files in " + wedge_dir)
else:
    if ns.scale is not None:
        repack_params += [ "-vf", "scale=iw*{}:ih*{}".format(ns.scale,ns.scale) ]

    if ns.rate_out is None:
        if os.path.exists(wav_file):
            cmd = [ffmpeg,  "-i", wedge_dir + "/frame-%04d.jpg", "-i", wav_file] + repack_params + [ output_video]
        else:
            cmd = [ffmpeg,  "-i", wedge_dir + "/frame-%04d.jpg"] + repack_params + [ output_video] 
    else:
        r = str(ns.rate_out)
        # -crf 0 with an output extension of .mp4 SHOULD force lossless compression to MPEG H.264:
        if os.path.exists(wav_file):
            cmd = [ffmpeg,  "-r", r, "-i", wedge_dir + "/frame-%04d.jpg", "-i", wav_file] + repack_params + [ output_video] 
        else:
            cmd = [ffmpeg,  "-r", r, "-i", wedge_dir + "/frame-%04d.jpg" ] + repack_params + [ output_video]
    logprint("Invoking: {}\n".format( cmd ))
    call ( cmd )


if log is not None:
    log.close()

if USE_PIDS:
   x = ".wedge." + str(os.getpid())
else:
   x = ".wedge"

if wedge_dir == x:
    if CLEANUP:
        shutil.rmtree(wedge_dir, ignore_errors=True)
    
if CLEANUP:
    shutil.rmtree(chunk_dir, ignore_errors=True)


#if ns.rate_out is None:
#    call( [ffmpeg, "-i", ".wedge/frame-%04d.jpg", "-i", wav_file, "-strict", "-2","-crf", "0", output_video] )
#else:
#    r = str(ns.rate_out)
#    # -crf 0 with an output extension of .mp4 SHOULD force lossless compression to MPEG H.264:
#    call( [ffmpeg, "-r", r, "-i", ".wedge/frame-%04d.jpg", "-i", wav_file, "-strict", "-2","-crf", "0", output_video] )
